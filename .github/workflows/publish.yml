name: Publish Build
on:
  workflow_call:
    inputs:
      provenance-download-name:
        required: true
        type: string
      provenance-download-sha256:
        required: true
        type: string
      artifact-download-name:
        required: true
        type: string
      artifact-download-sha256:
        required: true
        type: string
      provenance-release-name:
        required: true
        type: string

jobs:
  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Download provenance
        uses: slsa-framework/slsa-github-generator/actions/delegator/secure-attestations-download@v1.9.0
        with:
          name: ${{ inputs.provenance-download-name }}
          sha256: ${{ inputs.provenance-download-sha256 }}

      - name: Upload provenance
        env:
          GH_TOKEN: ${{ github.token }}
          OUT: ${{ inputs.provenance-release-name }}
          REF: ${{ github.ref }}
        run: |
          set -euo pipefail

          # Get the tag.
          tag="$(echo $REF | cut -d '/' -f3-)"

          # List attestations.
          find "$OUT" -type f | tee ./FILES

          # Upload attestations.
          while IFS= read -r line; do
              file="$line"
              gh -R "$GITHUB_REPOSITORY" release upload "$tag" "$file"
          done < FILES

      # Artifacts are downloaded in the current directory. The downloaded folder
      # is the one uploaded by the TCA, which in our case is called "artifacts".
      - name: Download artifacts
        uses: slsa-framework/slsa-github-generator/actions/delegator/secure-download-folder@v1.9.0
        with:
          name: ${{ inputs.artifact-download-name }}
          sha256: ${{ inputs.artifact-download-sha256 }}
          path: "."

      - name: Upload the artifacts
        env:
          GH_TOKEN: ${{ github.token }}
          REF: ${{ github.ref }}
        run: |
          set -euo pipefail

          # Get the tag.
          tag="$(echo $REF | cut -d '/' -f3-)"

          # List artifacts.
          find artifacts/ -type f | tee ./FILES

          # Upload artifacts.
          while IFS= read -r line; do
              file="$line"
              gh -R "$GITHUB_REPOSITORY" release upload "$tag" "$file"
          done < FILES

     
    